// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: main.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetGameRunning {

  /// <summary>Holder for reflection information generated from main.proto</summary>
  public static partial class MainReflection {

    #region Descriptor
    /// <summary>File descriptor for main.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MainReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgptYWluLnByb3RvEg5OZXRHYW1lUnVubmluZyJuCg9QbGF5ZXJJbnB1dERh",
            "dGESDAoEam95WBgBIAEoAhIMCgRqb3lZGAIgASgCEhAKCHBsYXllcklEGAMg",
            "ASgFEhUKDWN1ckZyYW1lSW5kZXgYBCABKAUSFgoObmV4dEZyYW1lSW5kZXgY",
            "BSABKAUiiAEKEVVwZGF0ZU1lc3NhZ2VEYXRhEhUKDWN1ckZyYW1lSW5kZXgY",
            "ASABKAUSFgoObmV4dEZyYW1lSW5kZXgYAiABKAUSNQoMcGxheWVySW5wdXRz",
            "GAMgAygLMh8uTmV0R2FtZVJ1bm5pbmcuUGxheWVySW5wdXREYXRhEg0KBWRl",
            "bHRhGAQgASgCIh0KC1JlcUpvaW5Sb29tEg4KBnNraW5JRBgBIAEoBSI/CgtS",
            "ZXNKb2luUm9vbRIQCghwbGF5ZXJJRBgBIAEoBRIOCgZza2luSUQYAiABKAUS",
            "DgoGaXNTZWxmGAMgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetGameRunning.PlayerInputData), global::NetGameRunning.PlayerInputData.Parser, new[]{ "JoyX", "JoyY", "PlayerID", "CurFrameIndex", "NextFrameIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetGameRunning.UpdateMessageData), global::NetGameRunning.UpdateMessageData.Parser, new[]{ "CurFrameIndex", "NextFrameIndex", "PlayerInputs", "Delta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetGameRunning.ReqJoinRoom), global::NetGameRunning.ReqJoinRoom.Parser, new[]{ "SkinID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetGameRunning.ResJoinRoom), global::NetGameRunning.ResJoinRoom.Parser, new[]{ "PlayerID", "SkinID", "IsSelf" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerInputData : pb::IMessage<PlayerInputData> {
    private static readonly pb::MessageParser<PlayerInputData> _parser = new pb::MessageParser<PlayerInputData>(() => new PlayerInputData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInputData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetGameRunning.MainReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputData(PlayerInputData other) : this() {
      joyX_ = other.joyX_;
      joyY_ = other.joyY_;
      playerID_ = other.playerID_;
      curFrameIndex_ = other.curFrameIndex_;
      nextFrameIndex_ = other.nextFrameIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInputData Clone() {
      return new PlayerInputData(this);
    }

    /// <summary>Field number for the "joyX" field.</summary>
    public const int JoyXFieldNumber = 1;
    private float joyX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JoyX {
      get { return joyX_; }
      set {
        joyX_ = value;
      }
    }

    /// <summary>Field number for the "joyY" field.</summary>
    public const int JoyYFieldNumber = 2;
    private float joyY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JoyY {
      get { return joyY_; }
      set {
        joyY_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 3;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "curFrameIndex" field.</summary>
    public const int CurFrameIndexFieldNumber = 4;
    private int curFrameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFrameIndex {
      get { return curFrameIndex_; }
      set {
        curFrameIndex_ = value;
      }
    }

    /// <summary>Field number for the "nextFrameIndex" field.</summary>
    public const int NextFrameIndexFieldNumber = 5;
    private int nextFrameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextFrameIndex {
      get { return nextFrameIndex_; }
      set {
        nextFrameIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInputData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInputData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JoyX, other.JoyX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JoyY, other.JoyY)) return false;
      if (PlayerID != other.PlayerID) return false;
      if (CurFrameIndex != other.CurFrameIndex) return false;
      if (NextFrameIndex != other.NextFrameIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JoyX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JoyX);
      if (JoyY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JoyY);
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (CurFrameIndex != 0) hash ^= CurFrameIndex.GetHashCode();
      if (NextFrameIndex != 0) hash ^= NextFrameIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JoyX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(JoyX);
      }
      if (JoyY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(JoyY);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerID);
      }
      if (CurFrameIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurFrameIndex);
      }
      if (NextFrameIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NextFrameIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JoyX != 0F) {
        size += 1 + 4;
      }
      if (JoyY != 0F) {
        size += 1 + 4;
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (CurFrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFrameIndex);
      }
      if (NextFrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextFrameIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInputData other) {
      if (other == null) {
        return;
      }
      if (other.JoyX != 0F) {
        JoyX = other.JoyX;
      }
      if (other.JoyY != 0F) {
        JoyY = other.JoyY;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.CurFrameIndex != 0) {
        CurFrameIndex = other.CurFrameIndex;
      }
      if (other.NextFrameIndex != 0) {
        NextFrameIndex = other.NextFrameIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            JoyX = input.ReadFloat();
            break;
          }
          case 21: {
            JoyY = input.ReadFloat();
            break;
          }
          case 24: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 32: {
            CurFrameIndex = input.ReadInt32();
            break;
          }
          case 40: {
            NextFrameIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateMessageData : pb::IMessage<UpdateMessageData> {
    private static readonly pb::MessageParser<UpdateMessageData> _parser = new pb::MessageParser<UpdateMessageData>(() => new UpdateMessageData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateMessageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetGameRunning.MainReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMessageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMessageData(UpdateMessageData other) : this() {
      curFrameIndex_ = other.curFrameIndex_;
      nextFrameIndex_ = other.nextFrameIndex_;
      playerInputs_ = other.playerInputs_.Clone();
      delta_ = other.delta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMessageData Clone() {
      return new UpdateMessageData(this);
    }

    /// <summary>Field number for the "curFrameIndex" field.</summary>
    public const int CurFrameIndexFieldNumber = 1;
    private int curFrameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFrameIndex {
      get { return curFrameIndex_; }
      set {
        curFrameIndex_ = value;
      }
    }

    /// <summary>Field number for the "nextFrameIndex" field.</summary>
    public const int NextFrameIndexFieldNumber = 2;
    private int nextFrameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextFrameIndex {
      get { return nextFrameIndex_; }
      set {
        nextFrameIndex_ = value;
      }
    }

    /// <summary>Field number for the "playerInputs" field.</summary>
    public const int PlayerInputsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NetGameRunning.PlayerInputData> _repeated_playerInputs_codec
        = pb::FieldCodec.ForMessage(26, global::NetGameRunning.PlayerInputData.Parser);
    private readonly pbc::RepeatedField<global::NetGameRunning.PlayerInputData> playerInputs_ = new pbc::RepeatedField<global::NetGameRunning.PlayerInputData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetGameRunning.PlayerInputData> PlayerInputs {
      get { return playerInputs_; }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 4;
    private float delta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateMessageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateMessageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurFrameIndex != other.CurFrameIndex) return false;
      if (NextFrameIndex != other.NextFrameIndex) return false;
      if(!playerInputs_.Equals(other.playerInputs_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delta, other.Delta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurFrameIndex != 0) hash ^= CurFrameIndex.GetHashCode();
      if (NextFrameIndex != 0) hash ^= NextFrameIndex.GetHashCode();
      hash ^= playerInputs_.GetHashCode();
      if (Delta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delta);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurFrameIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurFrameIndex);
      }
      if (NextFrameIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NextFrameIndex);
      }
      playerInputs_.WriteTo(output, _repeated_playerInputs_codec);
      if (Delta != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Delta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurFrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFrameIndex);
      }
      if (NextFrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextFrameIndex);
      }
      size += playerInputs_.CalculateSize(_repeated_playerInputs_codec);
      if (Delta != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateMessageData other) {
      if (other == null) {
        return;
      }
      if (other.CurFrameIndex != 0) {
        CurFrameIndex = other.CurFrameIndex;
      }
      if (other.NextFrameIndex != 0) {
        NextFrameIndex = other.NextFrameIndex;
      }
      playerInputs_.Add(other.playerInputs_);
      if (other.Delta != 0F) {
        Delta = other.Delta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurFrameIndex = input.ReadInt32();
            break;
          }
          case 16: {
            NextFrameIndex = input.ReadInt32();
            break;
          }
          case 26: {
            playerInputs_.AddEntriesFrom(input, _repeated_playerInputs_codec);
            break;
          }
          case 37: {
            Delta = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqJoinRoom : pb::IMessage<ReqJoinRoom> {
    private static readonly pb::MessageParser<ReqJoinRoom> _parser = new pb::MessageParser<ReqJoinRoom>(() => new ReqJoinRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqJoinRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetGameRunning.MainReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqJoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqJoinRoom(ReqJoinRoom other) : this() {
      skinID_ = other.skinID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqJoinRoom Clone() {
      return new ReqJoinRoom(this);
    }

    /// <summary>Field number for the "skinID" field.</summary>
    public const int SkinIDFieldNumber = 1;
    private int skinID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinID {
      get { return skinID_; }
      set {
        skinID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqJoinRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqJoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkinID != other.SkinID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkinID != 0) hash ^= SkinID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqJoinRoom other) {
      if (other == null) {
        return;
      }
      if (other.SkinID != 0) {
        SkinID = other.SkinID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkinID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResJoinRoom : pb::IMessage<ResJoinRoom> {
    private static readonly pb::MessageParser<ResJoinRoom> _parser = new pb::MessageParser<ResJoinRoom>(() => new ResJoinRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResJoinRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetGameRunning.MainReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResJoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResJoinRoom(ResJoinRoom other) : this() {
      playerID_ = other.playerID_;
      skinID_ = other.skinID_;
      isSelf_ = other.isSelf_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResJoinRoom Clone() {
      return new ResJoinRoom(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "skinID" field.</summary>
    public const int SkinIDFieldNumber = 2;
    private int skinID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinID {
      get { return skinID_; }
      set {
        skinID_ = value;
      }
    }

    /// <summary>Field number for the "isSelf" field.</summary>
    public const int IsSelfFieldNumber = 3;
    private int isSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSelf {
      get { return isSelf_; }
      set {
        isSelf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResJoinRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResJoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (SkinID != other.SkinID) return false;
      if (IsSelf != other.IsSelf) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (SkinID != 0) hash ^= SkinID.GetHashCode();
      if (IsSelf != 0) hash ^= IsSelf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (SkinID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkinID);
      }
      if (IsSelf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsSelf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (SkinID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinID);
      }
      if (IsSelf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSelf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResJoinRoom other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.SkinID != 0) {
        SkinID = other.SkinID;
      }
      if (other.IsSelf != 0) {
        IsSelf = other.IsSelf;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 16: {
            SkinID = input.ReadInt32();
            break;
          }
          case 24: {
            IsSelf = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
